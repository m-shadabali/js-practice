A Queue is a linear structure which follows a particular order in which the operations are performed. The order is First In First Out (FIFO). A good example of a queue is any queue of consumers for a resource where the consumer that came first is served first. The difference between stacks and queues is in removing. In a stack we remove the item the most recently added; in a queue, we remove the item the least recently added.




Basics – Introduction to JavaScript syntax. Learn how to include the scripts on a HTML page, how to declare a function, target a DOM element by it ID, how to output the data and how to write comments.
Loops – Most programming languages allow to work with loops, which help in executing one or more statements up to a desired number of times. Find the "for" and "while" loop syntax in this section.
If - Else statements – Conditional statements are used to perform different actions based on different conditions.
Variables – Use variables (numbers, strings, arrays etc.) and learn the operators.
Data types – You can declare many types of variables and declare your own objects in JavaScript.
Strings – Learn how to work with JS strings and find the most common functions to work with this data type.
Events – Use JavaScript event listeners to trigger functions.
Numbers and math – Work with JS numbers, predefined constants and perform math functions.
Dates – Get or modify current time and date.
Closures
Closures are an extension of the concept of scope — functions have access to variables that were available
in the scope where the function was created. If that’s confusing, don’t worry: closures are generally best
understood by example.
In “Functions can”see” changes in variable values after the function is defined”, we saw how functions
have access to changing variable values. The same sort of behavior exists with functions defined within
loops — the function “sees” the change in the variable’s value even after the function is defined, resulting
in all clicks alerting 5.
How to lock in the value of i?
/* this won ’t behave as we want it to; */
/* every click will alert 5 */
for ( var i =0; i <5; i ++) {
$( ’ <p> click me </p > ’). appendTo ( ’body ’). click ( function () {
alert (i);
});
}
Locking in the value of i with a closure
/* fix : ’close ’ the value of i inside
createFunction , so it won ’t change */
var createFunction = function (i) {
return function () { alert (i); };
1
